/*-
 * ========================LICENSE_START=================================
 * Smooks Commons
 * %%
 * Copyright (C) 2020 Smooks
 * %%
 * Licensed under the terms of the Apache License Version 2.0, or
 * the GNU Lesser General Public License version 3.0 or later.
 * 
 * SPDX-License-Identifier: Apache-2.0 OR LGPL-3.0-or-later
 * 
 * ======================================================================
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *     http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * ======================================================================
 * 
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 3 of the License, or (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 * 
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program; if not, write to the Free Software Foundation,
 * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
 * =========================LICENSE_END==================================
 */
package org.smooks.javabean.pojogen;

import org.junit.Test;
import org.smooks.converter.factory.TypeConverterFactory;
import org.smooks.io.NullWriter;
import org.smooks.io.StreamUtils;
import org.smooks.profile.BasicProfile;
import org.smooks.profile.Profile;

import javax.annotation.Resource;
import java.io.IOException;
import java.io.StringWriter;
import java.util.List;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.fail;

/**
 * @author <a href="mailto:tom.fennelly@jboss.com">tom.fennelly@jboss.com</a>
 */
public class PojoGenTest {

	@Test
    public void test_01() throws IOException {
        JClass aClass = new JClass("com.acme", "AClass");
        JClass bClass = new JClass("com.acme", "BClass");

        aClass.setFluentSetters(true);
        bClass.setFluentSetters(false);

        aClass.addBeanProperty(new JNamedType(new JType(int.class), "primVar"));
        aClass.addBeanProperty(new JNamedType(new JType(Double.class), "doubleVar"));
        aClass.addBeanProperty(new JNamedType(new JType(BBBClass.class), "objVar"));
        aClass.addBeanProperty(new JNamedType(new JType(List.class, BBBClass.class), "genericVar"));

        aClass.getImplementTypes().add(new JType(TypeConverterFactory.class));
        aClass.getImplementTypes().add(new JType(Profile.class));

        aClass.getExtendTypes().add(new JType(NullWriter.class));
        aClass.getExtendTypes().add(new JType(BasicProfile.class));

        aClass.getAnnotationTypes().add(new JType(Resource.class));

        // Wire AClass into BClass...
        bClass.addBeanProperty(new JNamedType(new JType(BBBClass.class), "bbbVar"));
        bClass.addBeanProperty(new JNamedType(new JType(aClass.getSkeletonClass()), "aClassVar"));

        StringWriter aWriter = new StringWriter();
        StringWriter bWriter = new StringWriter();

        aClass.writeClass(aWriter);
        String aS = aWriter.toString();
        assertEquals(StreamUtils.trimLines(AClass_Expected), StreamUtils.trimLines(aS));

        bClass.writeClass(bWriter);
        String bS = bWriter.toString();
        assertEquals(StreamUtils.trimLines(BClass_Expected), StreamUtils.trimLines(bS));
    }

	@Test
    public void test_duplicateProperty() {
        JClass aClass = new JClass("com.acme", "AClass");

        aClass.addBeanProperty(new JNamedType(new JType(Double.class), "xVar"));
        try {
            aClass.addBeanProperty(new JNamedType(new JType(Integer.class), "xVar"));
            fail("Exected IllegalArgumentException.");
        } catch(IllegalArgumentException e) {
            assertEquals("Property 'xVar' already defined.", e.getMessage());
        }
    }

    private static final String AClass_Expected = "/**\n" +
            " * This class was generated by Smooks EJC (http://www.smooks.org).\n" +
            " */\n" +
            "package com.acme;\n" +
            "\n" +
            "import org.smooks.converter.factory.TypeConverterFactory;    \n" +
            "import org.smooks.profile.Profile;    \n" +
            "import org.smooks.io.NullWriter;    \n" +
            "import org.smooks.profile.BasicProfile;    \n" +
            "import javax.annotation.Resource;     \n" +
            "import org.smooks.javabean.pojogen.BBBClass;    \n" +
            "import java.util.List;    \n" +
            "\n" +
            "@Resource" +
            "public class AClass implements TypeConverterFactory, Profile extends NullWriter, BasicProfile {\n" +
            "\n" +
            "    private int primVar;\n" +
            "    private Double doubleVar;\n" +
            "    private BBBClass objVar;\n" +
            "    private List<BBBClass> genericVar;\n" +
            "\n" +
            "    public int getPrimVar() {\n" +
            "        return primVar;\n" +
            "    }\n" +
            "\n" +
            "    public AClass setPrimVar(int primVar) {\n" +
            "        this.primVar = primVar;  return this;\n" +
            "    }\n" +
            "\n" +
            "    public Double getDoubleVar() {\n" +
            "        return doubleVar;\n" +
            "    }\n" +
            "\n" +
            "    public AClass setDoubleVar(Double doubleVar) {\n" +
            "        this.doubleVar = doubleVar;  return this;\n" +
            "    }\n" +
            "\n" +
            "    public BBBClass getObjVar() {\n" +
            "        return objVar;\n" +
            "    }\n" +
            "\n" +
            "    public AClass setObjVar(BBBClass objVar) {\n" +
            "        this.objVar = objVar;  return this;\n" +
            "    }\n" +
            "\n" +
            "    public List<BBBClass> getGenericVar() {\n" +
            "        return genericVar;\n" +
            "    }\n" +
            "\n" +
            "    public AClass setGenericVar(List<BBBClass> genericVar) {\n" +
            "        this.genericVar = genericVar;  return this;\n" +
            "    }\n" +
            "}";

    private static final String BClass_Expected = "/**\n" +
            " * This class was generated by Smooks EJC (http://www.smooks.org).\n" +
            " */\n" +
            "package com.acme;\n" +
            "\n" +
            "import org.smooks.javabean.pojogen.BBBClass;    \n" +
            "\n" +
            "public class BClass {\n" +
            "\n" +
            "    private BBBClass bbbVar;\n" +
            "    private AClass aClassVar;\n" +
            "\n" +
            "    public BBBClass getBbbVar() {\n" +
            "        return bbbVar;\n" +
            "    }\n" +
            "\n" +
            "    public void setBbbVar(BBBClass bbbVar) {\n" +
            "        this.bbbVar = bbbVar;\n" +
            "    }\n" +
            "\n" +
            "    public AClass getAClassVar() {\n" +
            "        return aClassVar;\n" +
            "    }\n" +
            "\n" +
            "    public void setAClassVar(AClass aClassVar) {\n" +
            "        this.aClassVar = aClassVar;\n" +
            "    }\n" +
            "}";
}
