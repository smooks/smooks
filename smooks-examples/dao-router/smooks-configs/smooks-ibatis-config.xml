<?xml version="1.0"?>
<!--
  ~ Milyn - Copyright (C) 2006 - 2010
  ~
  ~  This library is free software; you can redistribute it and/or
  ~  modify it under the terms of the GNU Lesser General Public
  ~  License (version 2.1) as published by the Free Software
  ~  Foundation.
  ~
  ~  This library is distributed in the hope that it will be useful,
  ~  but WITHOUT ANY WARRANTY; without even the implied warranty of
  ~  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
  ~
  ~  See the GNU Lesser General Public License for more details:
  ~  http://www.gnu.org/licenses/lgpl.txt
  -->

<smooks-resource-list
	xmlns="https://www.smooks.org/xsd/smooks-1.2.xsd"
	xmlns:jb="https://www.smooks.org/xsd/smooks/javabean-1.6.xsd"
	xmlns:dao="https://www.smooks.org/xsd/smooks/persistence-1.5.xsd">

	<!--
		This is the normal Javabean binding. Notice that we have a wiring on customer. The
	    Customer entity will not be created but looked up by a locator.
	 -->
    <jb:bean beanId="order" class="example.ibatis.entity.Order" createOnElement="order">
        <jb:value property="ordernumber"   data="ordernumber" decoder="Integer" />
        <jb:value property="orderDate"     data="date"        decoder="Date">
            <jb:decodeParam name="format">yyyy-MM-dd HH:mm:ss</jb:decodeParam>
        </jb:value>

        <jb:wiring property="customer"  beanIdRef="customer" />
    </jb:bean>

	<!--
		This is the normal Javabean binding. Notice that we have a wiring on product. The
	    Product entity will not be created but looked up by a locator.
	 -->
    <jb:bean beanId="orderLine" class="example.ibatis.entity.OrderLine" createOnElement="order-item">
		<jb:value property="quantity" data="quantity" decoder="Integer"/>
		<jb:wiring property="order" beanIdRef="order"/>
		<jb:wiring property="product" beanIdRef="product"/>
    </jb:bean>

	<!--
		The locator calls the SqlMapClient#queryForList("customerById", {id="id"}) method and expects a result. The locator wants
		a unique result but the queryForList() method returns a list. The locator will check that there is only
		one row and extract that row from the list. That entity is inserted into bean repository under
		the bean id customer.

		The lookup parameter contains the ibatis query id that will be executed.
	-->
    <dao:locator beanId="customer" lookup="customerById" lookupOnElement="customer" onNoResult="EXCEPTION" uniqueResult="true">
    	<dao:params>
    		<dao:value name="id" data="customer" decoder="Integer"/>
    	</dao:params>
    </dao:locator>

	<!--
		Same as the customerById lookup but then for the product
	-->
    <dao:locator beanId="product" lookup="productById" lookupOnElement="product" onNoResult="EXCEPTION" uniqueResult="true">
    	<dao:params>
    		<dao:value name="id" data="product" decoder="Integer"/>
    	</dao:params>
    </dao:locator>

	<!--
		The inserter calls the SqlMapClient#insert() method on the beginning of the order-items element. This
		ensures that the order-items element is in the database before the order lines are added.
	-->
	<dao:inserter beanId="order" name="insertOrder" insertOnElement="order-items" insertBefore="true" />

	<!--
		This inserter calls the insert method for the order lines.
	-->
	<dao:inserter beanId="orderLine" name="insertOrderLine" />

</smooks-resource-list>
