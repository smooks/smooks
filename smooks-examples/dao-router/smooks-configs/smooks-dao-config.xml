<?xml version="1.0"?>
<!--
  ~ Milyn - Copyright (C) 2006 - 2010
  ~
  ~  This library is free software; you can redistribute it and/or
  ~  modify it under the terms of the GNU Lesser General Public
  ~  License (version 2.1) as published by the Free Software
  ~  Foundation.
  ~
  ~  This library is distributed in the hope that it will be useful,
  ~  but WITHOUT ANY WARRANTY; without even the implied warranty of
  ~  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
  ~
  ~  See the GNU Lesser General Public License for more details:
  ~  http://www.gnu.org/licenses/lgpl.txt
  -->

<smooks-resource-list
	xmlns="https://www.smooks.org/xsd/smooks-1.2.xsd"
	xmlns:jb="https://www.smooks.org/xsd/smooks/javabean-1.6.xsd"
	xmlns:dao="https://www.smooks.org/xsd/smooks/persistence-1.5.xsd">

	<!--
		This is the normal Javabean binding. Notice that we have a wiring on customer. The
	    Customer entity will not be created but looked up by a locator.
	 -->
    <jb:bean beanId="order" class="example.jpa.entity.Order" createOnElement="order">
        <jb:value property="ordernumber"   data="ordernumber" decoder="Integer" />
        <jb:value property="orderDate"     data="date"        decoder="Date">
            <jb:decodeParam name="format">yyyy-MM-dd HH:mm:ss</jb:decodeParam>
        </jb:value>

        <jb:wiring property="customer"  beanIdRef="customer" />
        <jb:wiring setterMethod="addOrderLine"  beanIdRef="orderLine" />
    </jb:bean>

	<!--
		The locator calls the CustomerDao#findById() method and expects a result. The result
		will be added to the bean repository under the bean id "customer".
		The locator know which method to call via the @Lookup annotation on the method. It knows
		how to map the parameters because each method parameter is annotated with the @Param annotation.
		Because only the order bean, in the previous resource, wants to wire the result the locator
		will by default execute on the same selector as the previous resource.
	-->
    <dao:locator beanId="customer" dao="customer" lookup="id" onNoResult="EXCEPTION" >
    	<dao:params>
    		<dao:value name="id" data="customer" decoder="Integer"/>
    	</dao:params>
    </dao:locator>

	<!--
		This is the normal Javabean binding. Notice that we have a wiring on product. The
	    Product entity will not be created but looked up by a locator.
	 -->
    <jb:bean beanId="orderLine" class="example.jpa.entity.OrderLine" createOnElement="order-item">
		<jb:value property="quantity" data="quantity" decoder="Integer"/>
		<jb:wiring property="order" beanIdRef="order"/>
		<jb:wiring property="product" beanIdRef="product"/>
    </jb:bean>

	<!--
		This locator calls the ProductDao#findById() method and expects a result. The result
		will be added to the bean repository under the bean id "customer".
	-->
    <dao:locator beanId="product" dao="product" lookup="id" lookupOnElement="order-item" onNoResult="EXCEPTION">
    	<dao:params>
    		<dao:value name="id" data="product" decoder="Integer"/>
    	</dao:params>
    </dao:locator>

	<!--
		The inserter calls the OrderDao#insertOrder() method at the visitAfter of Order. The inserter
		knows which method it needs to call via the @Persist annotation on the method.
		The insertOrder method is responsible for inserting the Order.
	-->
	<dao:inserter beanId="order" dao="order" />

</smooks-resource-list>
