<?xml version="1.0" encoding="UTF-8"?>
<!--
  ~ Milyn - Copyright (C) 2006 - 2010
  ~
  ~  This library is free software; you can redistribute it and/or
  ~  modify it under the terms of the GNU Lesser General Public
  ~  License (version 2.1) as published by the Free Software
  ~  Foundation.
  ~
  ~  This library is distributed in the hope that it will be useful,
  ~  but WITHOUT ANY WARRANTY; without even the implied warranty of
  ~  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
  ~
  ~  See the GNU Lesser General Public License for more details:
  ~  http://www.gnu.org/licenses/lgpl.txt
  -->

<xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema"
           xmlns:smooks="https://www.smooks.org/xsd/smooks-1.2.xsd"
           xmlns:smooks-persistence="https://www.smooks.org/xsd/smooks/persistence-1.5.xsd"
           targetNamespace="https://www.smooks.org/xsd/smooks/persistence-1.5.xsd"
           elementFormDefault="qualified">

    <xs:import namespace="https://www.smooks.org/xsd/smooks-1.2.xsd"/>

    <xs:annotation>
        <xs:documentation xml:lang="en">Smooks Persistence Configuration</xs:documentation>
    </xs:annotation>

    <xs:element name="inserter" type="smooks-persistence:inserter" substitutionGroup="smooks:abstract-resource-config">
    	<xs:annotation>
			<xs:documentation xml:lang="en">
				This DAO inserter calls the insert method of a DAO, using a entity bean from
				the bean context as parameter.
			</xs:documentation>
		</xs:annotation>
    </xs:element>

    <xs:complexType name="inserter">
		<xs:annotation>
			<xs:documentation xml:lang="en">
				This DAO inserter calls the insert method of a DAO, using a entity bean from
				the bean context as parameter.
			</xs:documentation>
		</xs:annotation>

       	<xs:complexContent>
       		<xs:extension base="smooks:element-visitor">
       			<xs:attribute name="dao" type="xs:string" use="optional">
       				<xs:annotation>
       					<xs:documentation xml:lang="en">
       						The name of the DAO that will be used. If it is not set then the default DAO is used.
       					</xs:documentation>
       				</xs:annotation>
       			</xs:attribute>
       			<xs:attribute name="beanId" type="xs:string" use="required">
       				<xs:annotation>
       					<xs:documentation xml:lang="en">
       						The ID under which the entity bean is
       						bound in the bean context.
       					</xs:documentation>
       				</xs:annotation>
       			</xs:attribute>
       			<xs:attribute name="insertedBeanId" type="xs:string" use="optional">
       				<xs:annotation>
       					<xs:documentation xml:lang="en">
       						The bean id under which the inserted bean will be stored. If not set then the object returned
                            by the insert method will not be stored in bean context.
       					</xs:documentation>
       				</xs:annotation>
       			</xs:attribute>
       			<xs:attribute name="name" type="xs:string" use="optional">
       				<xs:annotation>
       					<xs:documentation xml:lang="en">
       						The name of the insert method. Depending of the adapter this can mean different things.
       						For instance when using annotated DAO's you can name the methods and target them with this property, but
       						when using the Ibatis adapter you set the id of the Ibatis statement in this attribute.
       						This attribute is not supported by all scribe adapters.
       					</xs:documentation>
       				</xs:annotation>
       			</xs:attribute>
       			<xs:attribute name="insertOnElement" type="xs:string" use="optional">
       				<xs:annotation>
       					<xs:documentation xml:lang="en">
       						The element selector to select the element when the inserter should execute.
                            If this selector is not set then Smooks wil try to set a sensible default by finding
                            the bean creator resource that creates the bean under the defined beanId and use the
                            same selector. This only works if the bean creator is defined before the inserter in
                            the configuration.
       					</xs:documentation>
       				</xs:annotation>
       			</xs:attribute>
       			<xs:attribute name="insertOnElementNS" type="xs:anyURI">
       				<xs:annotation>
       					<xs:documentation xml:lang="en">
       						Namespace control for the "InsertOnElement" attribute.
       					</xs:documentation>
       				</xs:annotation>
       			</xs:attribute>
				<xs:attribute name="insertBefore" type="xs:boolean" use="optional" default="false">
       				<xs:annotation>
       					<xs:documentation xml:lang="en">
       						If the inserter should execute on the 'before' event.
       					</xs:documentation>
       				</xs:annotation>
       			</xs:attribute>
       		</xs:extension>
       	</xs:complexContent>

    </xs:complexType>

	<xs:element name="updater" type="smooks-persistence:updater" substitutionGroup="smooks:abstract-resource-config">
    	<xs:annotation>
			<xs:documentation xml:lang="en">
			</xs:documentation>
		</xs:annotation>
    </xs:element>

    <xs:complexType name="updater">
		<xs:annotation>
			<xs:documentation xml:lang="en">
			</xs:documentation>
		</xs:annotation>

       	<xs:complexContent>
       		<xs:extension base="smooks:element-visitor">
       			<xs:attribute name="dao" type="xs:string" use="optional">
       				<xs:annotation>
       					<xs:documentation xml:lang="en">
       						The name of the DAO that will be used. If it is not set then the default DAO is used.
       					</xs:documentation>
       				</xs:annotation>
       			</xs:attribute>
       			<xs:attribute name="beanId" type="xs:string" use="required">
       				<xs:annotation>
       					<xs:documentation xml:lang="en">
       						The ID under which the entity bean is
       						bound in the bean context.
       					</xs:documentation>
       				</xs:annotation>
       			</xs:attribute>
       			<xs:attribute name="updatedBeanId" type="xs:string" use="optional">
       				<xs:annotation>
       					<xs:documentation xml:lang="en">
       						The bean id under which the updated bean will be stored. If not set then the object returned
       						by the update method will not be stored in bean context.
       					</xs:documentation>
       				</xs:annotation>
       			</xs:attribute>
       			<xs:attribute name="name" type="xs:string" use="optional">
       				<xs:annotation>
       					<xs:documentation xml:lang="en">
       						The name of the update method. Depending of the adapter this can mean different things.
       						For instance when using annotated DAO's you can name the methods and target them with this property, but
       						when using the Ibatis adapter you set the id of the Ibatis statement in this attribute.
       					</xs:documentation>
       				</xs:annotation>
       			</xs:attribute>
       			<xs:attribute name="updateOnElement" type="xs:string" use="optional">
       				<xs:annotation>
       					<xs:documentation xml:lang="en">
       						The element selector to select the element when the inserter should execute.
                            If this selector is not set then Smooks wil try to set a sensible default by finding
                            the bean creator resource that creates the bean under the defined beanId and use the
                            same selector. This only works if the bean creator is defined before the updater in
                            the configuration.
       					</xs:documentation>
       				</xs:annotation>
       			</xs:attribute>
       			<xs:attribute name="updateOnElementNS" type="xs:anyURI">
       				<xs:annotation>
       					<xs:documentation xml:lang="en">
       						Namespace control for the "updateOnElement" attribute.
       					</xs:documentation>
       				</xs:annotation>
       			</xs:attribute>
				<xs:attribute name="updateBefore" type="xs:boolean" use="optional" default="false">
       				<xs:annotation>
       					<xs:documentation xml:lang="en">
       						If the updater should execute on the 'before' event.
       					</xs:documentation>
       				</xs:annotation>
       			</xs:attribute>
       		</xs:extension>
       	</xs:complexContent>

    </xs:complexType>

    <xs:element name="deleter" type="smooks-persistence:deleter" substitutionGroup="smooks:abstract-resource-config">
    	<xs:annotation>
			<xs:documentation xml:lang="en">
				This DAO deleter calls the delete method of a DAO, using a entity bean from
				the bean context as parameter.
			</xs:documentation>
		</xs:annotation>
    </xs:element>

	<xs:complexType name="deleter">
		<xs:annotation>
			<xs:documentation xml:lang="en">
				This DAO deleter calls the delete method of a DAO, using a entity bean from
				the bean context as parameter.
			</xs:documentation>
		</xs:annotation>

       	<xs:complexContent>
       		<xs:extension base="smooks:element-visitor">
       			<xs:attribute name="dao" type="xs:string" use="optional">
       				<xs:annotation>
       					<xs:documentation xml:lang="en">
       						The name of the DAO that will be used.
       						If it is not set then the default DAO is used.
       					</xs:documentation>
       				</xs:annotation>
       			</xs:attribute>
       			<xs:attribute name="beanId" type="xs:string" use="required">
       				<xs:annotation>
       					<xs:documentation xml:lang="en">
       						The ID under which the entity bean is
       						bound in the bean context.
       					</xs:documentation>
       				</xs:annotation>
       			</xs:attribute>
       			<xs:attribute name="deletedBeanId" type="xs:string" use="optional">
       				<xs:annotation>
       					<xs:documentation xml:lang="en">
       						The bean id under which the deleted bean will be stored. If not set then the deleted
                            bean will not be stored in bean context.
       					</xs:documentation>
       				</xs:annotation>
       			</xs:attribute>
       			<xs:attribute name="name" type="xs:string" use="optional">
       				<xs:annotation>
       					<xs:documentation xml:lang="en">
       						The name of the delete method. Depending of the adapter this can mean different things.
       						For instance when using annotated DAO's you can name the methods and target them with this property, but
       						when using the Ibatis adapter you set the id of the Ibatis statement in this attribute.
       						This attribute is not supported by all scribe adapters.
       					</xs:documentation>
       				</xs:annotation>
       			</xs:attribute>
       			<xs:attribute name="deleteOnElement" type="xs:string" use="required">
       				<xs:annotation>
       					<xs:documentation xml:lang="en">
       						The element selector to select the element when the delete should execute.
       					</xs:documentation>
       				</xs:annotation>
       			</xs:attribute>
       			<xs:attribute name="deleteOnElementNS" type="xs:anyURI">
       				<xs:annotation>
       					<xs:documentation xml:lang="en">
       						Namespace control for the "deleteOnElement" attribute.
       					</xs:documentation>
       				</xs:annotation>
       			</xs:attribute>
				<xs:attribute name="deleteBefore" type="xs:boolean" use="optional" default="false">
       				<xs:annotation>
       					<xs:documentation xml:lang="en">
       						If the deleter should execute on the 'before' event.
       					</xs:documentation>
       				</xs:annotation>
       			</xs:attribute>
       		</xs:extension>
       	</xs:complexContent>

    </xs:complexType>

    <xs:element name="flusher" type="smooks-persistence:flusher" substitutionGroup="smooks:abstract-resource-config">
    	<xs:annotation>
			<xs:documentation xml:lang="en">
				This DAO flusher calls the flush method of a DAO.
			</xs:documentation>
		</xs:annotation>
    </xs:element>

    <xs:complexType name="flusher">
		<xs:annotation>
			<xs:documentation xml:lang="en">
				This DAO flusher calls the flush method of a DAO.
			</xs:documentation>
		</xs:annotation>

       	<xs:complexContent>
       		<xs:extension base="smooks:element-visitor">
       			<xs:attribute name="dao" type="xs:string" use="optional">
       				<xs:annotation>
       					<xs:documentation xml:lang="en">
       						The name of the DAO that needs to get flushed. If it is not set then the default DAO will be flushed.
       					</xs:documentation>
       				</xs:annotation>
       			</xs:attribute>
       			<xs:attribute name="flushOnElement" type="xs:string" use="required">
       				<xs:annotation>
       					<xs:documentation xml:lang="en">
       						The element selector to select the element when the flusher should execute.
       					</xs:documentation>
       				</xs:annotation>
       			</xs:attribute>
       			<xs:attribute name="flushOnElementNS" type="xs:anyURI">
       				<xs:annotation>
       					<xs:documentation xml:lang="en">
       						Namespace control for the "flushOnElement" attribute.
       					</xs:documentation>
       				</xs:annotation>
       			</xs:attribute>
				<xs:attribute name="flushBefore" type="xs:boolean" use="optional" default="false">
       				<xs:annotation>
       					<xs:documentation xml:lang="en">
       						If the flusher should execute on the 'before' event.
       					</xs:documentation>
       				</xs:annotation>
       			</xs:attribute>
       		</xs:extension>
       	</xs:complexContent>

    </xs:complexType>

    <xs:element name="locator" type="smooks-persistence:locator" substitutionGroup="smooks:abstract-resource-config">
    	<xs:annotation>
			<xs:documentation xml:lang="en">
				Can locate data/records by execution lookup methods or invoking
				queries.
				<p />
				The lookup methods or query can define parameters. The data for
				these parameters can directly be extracted from the input data stream
				or from existing beans in the beancontext or from a MVEL expression.
				The parameters can be named or be positional. In case of positional
				parameters the order in which the parameters are defined is crucial.
			</xs:documentation>
		</xs:annotation>
    </xs:element>

    <xs:complexType name="locator">
    	<xs:annotation>
    		<xs:documentation xml:lang="en">
				Can locate data/records by execution lookup methods or invoking
				queries.
				<p />
				The lookup methods or query can define parameters. The data for
				these parameters can directly be extracted from the input data stream
				or from existing beans in the beancontext or from a MVEL expression.
				The parameters can be named or be positional.
				<p/>
				The locator can handle multiple results or one unique result. In
				case of multiple result a List is set in the bean context.
				In case of a unique result the result will directly be set in the
				bean context.
				<p/>
				In case of a query the query language depends on the
				dao or the scribe adapter.
    		</xs:documentation>
    	</xs:annotation>
    	<xs:complexContent>
    		<xs:extension base="smooks:element-visitor">
    			<xs:sequence>
    				<xs:element name="query" type="xs:string" maxOccurs="1" minOccurs="0">
    					<xs:annotation>
    						<xs:documentation xml:lang="en">
    							The query to locate the records/entities with.
    						</xs:documentation>
    					</xs:annotation>
    				</xs:element>
    				<xs:element name="params" type="smooks-persistence:parameters" maxOccurs="1" minOccurs="0">
    					<xs:annotation>
    						<xs:documentation xml:lang="en">
    							The lookup method/query parameters.
    						</xs:documentation>
   						</xs:annotation>
    				</xs:element>
    			</xs:sequence>
    			<xs:attribute name="beanId" type="xs:string" use="required">
    				<xs:annotation>
    					<xs:documentation xml:lang="en">
    						The bean id under which the result is stored. If
    						multiple results
    					</xs:documentation>
    				</xs:annotation>
    			</xs:attribute>
    			<xs:attribute name="dao" type="xs:string" use="optional">
    				<xs:annotation>
    					<xs:documentation xml:lang="en">
    						The name of the DAO that used. If it is not set then the default DAO will be used.
    					</xs:documentation>
    				</xs:annotation>
    			</xs:attribute>
    			<xs:attribute name="lookup" type="xs:string" use="optional">
    				<xs:annotation>
    					<xs:documentation xml:lang="en">
    						The name of the lookup method.
    					</xs:documentation>
    				</xs:annotation>
    			</xs:attribute>
    			<xs:attribute name="onNoResult"
    				type="smooks-persistence:OnNoResult" use="optional"	default="NULLIFY">
    				<xs:annotation>
    					<xs:documentation xml:lang="en">
							Defines the action when no result is found.
    					</xs:documentation>
    				</xs:annotation>
    			</xs:attribute>
    			<xs:attribute name="uniqueResult" type="xs:boolean"	use="optional" default="false">
    				<xs:annotation>
    					<xs:documentation xml:lang="en">
							If the lookup should only return one result. If true and multiple
							results are found then an Exception will be thrown. If true and only
							one result is found then this result will be set in the bean context.
    					</xs:documentation>
    				</xs:annotation>
				</xs:attribute>
    			<xs:attribute name="lookupOnElement" type="xs:string" use="optional">
    				<xs:annotation>
    					<xs:documentation xml:lang="en">
    						The element selector to select the element when the locator should execute.
                            If this selector is not set then Smooks wil try to set a sensible default by searching
                            for the bean creator that wires the result of this lookup and use the
                            same selector. This only works if the bean creator is defined before the locator in
                            the configuration.
    					</xs:documentation>
    				</xs:annotation>
    			</xs:attribute>
    			<xs:attribute name="lookupOnElementNS"
    				type="xs:anyURI">
    				<xs:annotation>
    					<xs:documentation xml:lang="en">
    						Namespace control for the "lookupOnElement" attribute.
    					</xs:documentation>
    				</xs:annotation>
    			</xs:attribute>
    		</xs:extension>
    	</xs:complexContent>

    </xs:complexType>

    <xs:simpleType name="OnNoResult">
    	<xs:restriction base="xs:string">
    		<xs:enumeration value="NULLIFY">
    			<xs:annotation>
    				<xs:documentation xml:lang="en">
						If no result was located then the bean
						will be removed from bean context.
    				</xs:documentation>
    			</xs:annotation>
    		</xs:enumeration>
    		<xs:enumeration value="EXCEPTION">
    			<xs:annotation>
    				<xs:documentation xml:lang="en">
						If no result was located then an exception
						will be thrown.
    				</xs:documentation>
    			</xs:annotation>
    		</xs:enumeration>
    	</xs:restriction>
    </xs:simpleType>

    <xs:simpleType name="parameterType">
    	<xs:restriction base="xs:string">
    		<xs:enumeration value="POSITIONAL">
    			<xs:annotation>
    				<xs:documentation xml:lang="en">
    					Defines if the position of the defined
    					parameters is used to define the order in which
    					they are handed over to the
    					method or query. The lookup or query method will
    					be called with a List containing the
    					parameters.
    				</xs:documentation>
    			</xs:annotation>
    		</xs:enumeration>
    		<xs:enumeration value="NAMED">
    			<xs:annotation>
    				<xs:documentation xml:lang="en">
    					Defines the parameters should have names.
    					The lookup or query method will
    					be called with a Map containing the
    					parameters.
    				</xs:documentation>
    			</xs:annotation>
    		</xs:enumeration>
    	</xs:restriction>
    </xs:simpleType>

    <xs:complexType name="parameters">
    	<xs:annotation>
    		<xs:documentation xml:lang="en">
    			The lookup method/query parameters.
    		</xs:documentation>
    	</xs:annotation>
    	<xs:choice maxOccurs="unbounded" minOccurs="1">
    		<xs:element name="value" type="smooks-persistence:valueParameter">
    			<xs:annotation>
    				<xs:documentation xml:lang="en">
    					A value parameter that retrieves its value
    					directly from the input data using an element selector.
    				</xs:documentation>
    			</xs:annotation>
    		</xs:element>
    		<xs:element name="wiring" type="smooks-persistence:wiringParameter">
    			<xs:annotation>
    				<xs:documentation xml:lang="en">
    					Uses an object from the bean context as parameter.
    				</xs:documentation>
    			</xs:annotation>
    		</xs:element>
    		<xs:element name="expression"  type="smooks-persistence:expressionParameter">
    			<xs:annotation>
    				<xs:documentation xml:lang="en">
    					Uses the result from a MVEL expression as parameter.
    					The expression is defined within this element. A CDATA tag
    					or comment tag should be used to prevent problems
    					with XML restricted characters.
    				</xs:documentation>
    			</xs:annotation>
    		</xs:element>
    	</xs:choice>
    	<xs:attribute name="type" type="smooks-persistence:parameterType" default="NAMED">
			<xs:annotation>
				<xs:documentation xml:lang="en">
					If the parameters are named or positional.
				</xs:documentation>
			</xs:annotation>
    	</xs:attribute>
    </xs:complexType>

    <xs:complexType name="valueParameter">
    	<xs:annotation>
    		<xs:documentation xml:lang="en">
    			A value parameter that retrieves its value
    			directly from the input data using an element selector.
    		</xs:documentation>
    	</xs:annotation>
		<xs:sequence>
			<xs:element name="decodeParam" type="smooks-persistence:decoderParameter"
				maxOccurs="1"
				minOccurs="0">
				<xs:annotation>
					<xs:documentation xml:lang="en">
						The decoder parameters.
					</xs:documentation>
				</xs:annotation>
			</xs:element>
		</xs:sequence>
		<xs:attribute name="name" type="xs:string" use="optional">
			<xs:annotation>
				<xs:documentation xml:lang="en">
					In case of NAMED parameters the name of
					the parameter must be defined here.
				</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="index" type="xs:string" use="optional">
			<xs:annotation>
				<xs:documentation xml:lang="en">
					DEPRECATED
					<p />
					This attribute is in here by mistake and has
					no function.
				</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="data" type="xs:string" use="optional">
			<xs:annotation>
				<xs:documentation xml:lang="en">
					The data selector.
				</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="decoder" type="xs:string" use="optional">
			<xs:annotation>
				<xs:documentation xml:lang="en">
					The data decoder.
				</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="default" type="xs:string" use="optional">
			<xs:annotation>
				<xs:documentation xml:lang="en">
					The default value if the data is null or an empty string.
				</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="dataNS" type="xs:string" use="optional">
			<xs:annotation>
				<xs:documentation xml:lang="en">
					The namespace for the data selector.
				</xs:documentation>
			</xs:annotation>
		</xs:attribute>
    </xs:complexType>

    <xs:complexType name="wiringParameter">
        <xs:attribute name="name" type="xs:string" use="required">
			<xs:annotation>
				<xs:documentation xml:lang="en">
					In case of NAMED parameters the name of
					the parameter must be defined here.
				</xs:documentation>
			</xs:annotation>
		</xs:attribute>
        <xs:attribute name="beanIdRef" type="xs:string">
			<xs:annotation>
				<xs:documentation xml:lang="en">
					The bean id of bean that will be retrieved
					from the bean context.
				</xs:documentation>
			</xs:annotation>
		</xs:attribute>
 		<xs:attribute name="wireOnElement" type="xs:string">
			<xs:annotation>
				<xs:documentation xml:lang="en">
					The element on which the bean will be retrieved
					from the bean context. By default this happens on the
					same element the locator is defined one.
				</xs:documentation>
			</xs:annotation>
		</xs:attribute>
 		<xs:attribute name="wireOnElementNS" type="xs:string">
			<xs:annotation>
				<xs:documentation xml:lang="en">
					The namespace of the wireOnElement selector.
				</xs:documentation>
			</xs:annotation>
		</xs:attribute>
    </xs:complexType>

    <xs:complexType name="expressionParameter">
    	<xs:simpleContent>
    		<xs:extension base="xs:string">
		        <xs:attribute name="name" type="xs:string" use="required">
					<xs:annotation>
						<xs:documentation xml:lang="en">
							In case of NAMED parameters the name of
							the parameter must be defined here.
						</xs:documentation>
					</xs:annotation>
		        </xs:attribute>
		        <xs:attribute name="execOnElement" type="xs:string">
					<xs:annotation>
						<xs:documentation xml:lang="en">
							The element on which the expression will be executed.
							By default this happens on the
							same element the locator is defined one.
						</xs:documentation>
					</xs:annotation>
				</xs:attribute>
        		<xs:attribute name="execOnElementNS" type="xs:string">
					<xs:annotation>
						<xs:documentation xml:lang="en">
							The namespace of the execOnElement selector.
						</xs:documentation>
					</xs:annotation>
				</xs:attribute>
            </xs:extension>
    	</xs:simpleContent>
    </xs:complexType>


    <xs:complexType name="decoderParameter">
    	<xs:simpleContent>
    		<xs:extension base="xs:string">
    			<xs:attribute name="name" type="xs:string" use="required">
    				<xs:annotation>
    					<xs:documentation xml:lang="en">
    						The name of the parameter.
    					</xs:documentation>
    				</xs:annotation>
    			</xs:attribute>
    		</xs:extension>
    	</xs:simpleContent>
    </xs:complexType>

</xs:schema>