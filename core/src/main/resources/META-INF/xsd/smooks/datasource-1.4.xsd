<?xml version="1.0" encoding="UTF-8"?>
<xs:schema targetNamespace="https://www.smooks.org/xsd/smooks/datasource-1.4.xsd"
		   elementFormDefault="qualified"
		   xmlns:xs="http://www.w3.org/2001/XMLSchema"
		   xmlns:smooks="https://www.smooks.org/xsd/smooks-2.0.xsd"
		   xmlns:smooks-datasource="https://www.smooks.org/xsd/smooks/datasource-1.4.xsd">

	<xs:import namespace="https://www.smooks.org/xsd/smooks-2.0.xsd"/>

	<xs:annotation>
		<xs:documentation xml:lang="en">Smooks Datasource Configuration</xs:documentation>
	</xs:annotation>


	<xs:element name="direct" type="smooks-datasource:direct" substitutionGroup="smooks:abstract-resource-config" >
		<xs:annotation>
			<xs:documentation>
				Direct datasource configuration
				The direct datasource resource creates a connection to a datasource and
				makes it available in the ExecutionContext. The datasource can then be used
				by other cartridges to access the datasource.
			</xs:documentation>
		</xs:annotation>
	</xs:element>

	<xs:complexType name="direct">
		<xs:annotation>
			<xs:documentation xml:lang="en">
				Direct Datasource
			</xs:documentation>
		</xs:annotation>
		<xs:complexContent>
			<xs:extension
					base="smooks:element-visitor">
				<xs:attribute name="bindOnElement" type="xs:string" use="required" >
					<xs:annotation>
						<xs:documentation xml:lang="en">
							The element on which the datasource is bound. On the visitAfter
							of the element the connection does a Commit or Rollback depending
							if a exception got thrown.
						</xs:documentation>
					</xs:annotation>
				</xs:attribute>
				<xs:attribute name="bindOnElementNS" type="xs:string" use="optional" >
					<xs:annotation>
						<xs:documentation xml:lang="en">
							The namespace of the bindOnElement element
						</xs:documentation>
					</xs:annotation>
				</xs:attribute>
				<xs:attribute name="datasource" type="xs:string" use="required" >
					<xs:annotation>
						<xs:documentation xml:lang="en">
							The reference name of the datasource. This name must be used
							to retrieve the datasource from the ExecutionContext.
						</xs:documentation>
					</xs:annotation>
				</xs:attribute>
				<xs:attribute name="autoCommit" type="xs:boolean" use="optional" default="false" >
					<xs:annotation>
						<xs:documentation xml:lang="en">
							If the datasource should automaticly commit.
						</xs:documentation>
					</xs:annotation>
				</xs:attribute>
				<xs:attribute name="driver" type="xs:string"
							  use="required">
					<xs:annotation>
						<xs:documentation xml:lang="en">
							The JDBC driver name
						</xs:documentation>
					</xs:annotation>
				</xs:attribute>
				<xs:attribute name="url" type="xs:anyURI"
							  use="required">
					<xs:annotation>
						<xs:documentation xml:lang="en">
							The JDBC URL
						</xs:documentation>
					</xs:annotation>
				</xs:attribute>
				<xs:attribute name="username" type="xs:string"
							  use="required">
					<xs:annotation>
						<xs:documentation xml:lang="en">
							The username
						</xs:documentation>
					</xs:annotation>
				</xs:attribute>
				<xs:attribute name="password" type="xs:string"
							  use="required">
					<xs:annotation>
						<xs:documentation xml:lang="en">
							The password
						</xs:documentation>
					</xs:annotation>
				</xs:attribute>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>

	<xs:element name="JNDI" type="smooks-datasource:Jndi" substitutionGroup="smooks:abstract-resource-config" >
		<xs:annotation>
			<xs:documentation>
				JNDI datasource configuration
				The JNDI datasource resource retrieves a datasource from the JNDI and
				makes it available in the ExecutionContext. The datasource can then be used
				by other cartridges to access the datasource.
			</xs:documentation>
		</xs:annotation>
	</xs:element>

	<xs:complexType name="Jndi">
		<xs:annotation>
			<xs:documentation xml:lang="en">
				JNDI Datasource
			</xs:documentation>
		</xs:annotation>
		<xs:complexContent>
			<xs:extension base="smooks:element-visitor">

				<xs:attribute name="bindOnElement" type="xs:string"
							  use="required">
					<xs:annotation>
						<xs:documentation xml:lang="en">
							The element on which the datasource is
							bound. On the visitAfter of the element the
							connection does a commit or rollback
							depending if a exception got thrown.
						</xs:documentation>
					</xs:annotation>
				</xs:attribute>
				<xs:attribute name="datasource" type="xs:string"
							  use="required">
					<xs:annotation>
						<xs:documentation xml:lang="en">
							The reference name of the datasource. This
							name must be used to retrieve the datasource
							from the ExecutionContext.
						</xs:documentation>
					</xs:annotation>
				</xs:attribute>
				<xs:attribute name="datasourceJndi" type="xs:string" use="optional">
					<xs:annotation>
						<xs:documentation xml:lang="en">
							The JNDI path of the datasource.
						</xs:documentation>
					</xs:annotation>
				</xs:attribute>
				<xs:attribute name="transactionManager"	default="JDBC" use="optional">
					<xs:annotation>
						<xs:documentation xml:lang="en">
							The transaction manager used to manage the transaction.
						</xs:documentation>
					</xs:annotation>
					<xs:simpleType>
						<xs:restriction base="xs:string">
							<xs:enumeration value="JDBC">
								<xs:annotation>
									<xs:documentation xml:lang="en">
										The JDBC transaction manager uses the rollback/commit methods from
										the connection object. The autoCommit flag can be set with the
										autoCommit attribute.
										The setAutoCommitAllowed has no effect when this Transaction Manager
										is set.
									</xs:documentation>
								</xs:annotation>
							</xs:enumeration>
							<xs:enumeration value="JTA">
								<xs:annotation>
									<xs:documentation xml:lang="en">
										The JTA transaction manager uses JTA UserTransaction to begin/commit/rollback
										the transaction. The UserTransaction jndi address must be set in
										the transactionJndi attribute. The autoCommit is always false, but
										the setAutoCommitAllowed determines if the setAutoCommit method from
										the Connection object is executed to disable the autoCommit.
									</xs:documentation>
								</xs:annotation>
							</xs:enumeration>
							<xs:enumeration value="EXTERNAL">
								<xs:annotation>
									<xs:documentation xml:lang="en">
										The external transaction manager doesn't manage the transaction but
										allowes an external system to manager the transaction.
										The autoCommit flag can still be controlled if the setAutoCommitAllowed
										attribute is set to true.
									</xs:documentation>
								</xs:annotation>
							</xs:enumeration>
						</xs:restriction>
					</xs:simpleType>
				</xs:attribute>
				<xs:attribute name="transactionJndi" type="xs:string" use="optional">
					<xs:annotation>
						<xs:documentation xml:lang="en">
							If the transactionManager attribute is set to JTA then this attribute must be
							set to the JNDI address of the UserTransaction object.
						</xs:documentation>
					</xs:annotation>
				</xs:attribute>
				<xs:attribute name="autoCommit" type="xs:boolean"
							  use="optional" default="false">
					<xs:annotation>
						<xs:documentation xml:lang="en">
							If the datasource should automaticly commit.

							If the attribute 'setAutoCommitAllowed' or
							'manageTransaction' is set to false then
							this attribute has no effect.
						</xs:documentation>
					</xs:annotation>
				</xs:attribute>

				<xs:attribute name="setAutoCommitAllowed" type="xs:boolean" use="optional" default="true">
					<xs:annotation>
						<xs:documentation xml:lang="en">
							If Smooks is allowed to set the autoCommit
							on the connection.

							If the attribute 'manageTransaction' is set
							to false then this attribute has no effect.
						</xs:documentation>
					</xs:annotation>
				</xs:attribute>

			</xs:extension>
		</xs:complexContent>
	</xs:complexType>

</xs:schema>